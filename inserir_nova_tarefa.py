import sqlite3
import datetime
from criar_banco import criar_conexao

def inserir_tarefa_db(tarefa):
    """
    Esta √© a fun√ß√£o que efetivamente se conecta ao banco e executa o comando SQL INSERT.
    Ela recebe uma tupla 'tarefa' com os dados a serem inseridos.
    """
    # Abre a conex√£o com o banco
    conn = criar_conexao()
    # Se a conex√£o falhar, interrompe a fun√ß√£o
    if not conn:
        return None
    
    # Comando SQL para inserir dados na tabela 'tarefas'
    # Usamos '?' para evitar inje√ß√£o de SQL, uma pr√°tica de seguran√ßa essencial
    sql = ''' INSERT INTO tarefas(nome, descricao, data_inicial, data_final, tipo, situacao)
              VALUES(?,?,?,?,?,?) '''
    try:
        cursor = conn.cursor()
        # Executa o SQL, passando a tupla 'tarefa' para substituir os '?'
        cursor.execute(sql, tarefa)
        # Confirma (salva) a transa√ß√£o no banco de dados
        conn.commit()
        # Retorna o ID da linha que acabamos de inserir
        return cursor.lastrowid
    except sqlite3.Error as e:
        print(f"Erro ao inserir tarefa: {e}")
        return None
    finally:
        # Garante que a conex√£o seja sempre fechada, mesmo se ocorrer um erro
        if conn:
            conn.close()

def obter_dados_da_tarefa():
    """
    Esta fun√ß√£o interage com o usu√°rio para coletar os dados da nova tarefa.
    Ela tamb√©m faz algumas valida√ß√µes simples.
    """
    print("\n--- üìù Adicionar Nova Tarefa üìù ---")
    
    # Coleta e valida o nome da tarefa
    nome = input("Nome da Tarefa: ")
    while not nome.strip():
        print("Erro: O nome da tarefa n√£o pode ser vazio.")
        nome = input("Nome da Tarefa: ")

    descricao = input("Descri√ß√£o (opcional): ")
    
    # Coleta e valida a data inicial
    while True:
        data_inicial_str = input(f"Data de In√≠cio (AAAA-MM-DD, hoje √© {datetime.date.today()}): ")
        try:
            datetime.date.fromisoformat(data_inicial_str)
            break # Data v√°lida, sai do loop
        except ValueError:
            print("Erro: Formato de data inv√°lido. Por favor, use AAAA-MM-DD.")

    # Coleta e valida a data final
    while True:
        data_final_str = input("Data Final (AAAA-MM-DD): ")
        try:
            data_final_obj = datetime.date.fromisoformat(data_final_str)
            data_inicial_obj = datetime.date.fromisoformat(data_inicial_str)
            if data_final_obj >= data_inicial_obj:
                break # Data v√°lida e n√£o anterior √† inicial, sai do loop
            else:
                print("Erro: A data final n√£o pode ser anterior √† data inicial.")
        except ValueError:
            print("Erro: Formato de data inv√°lido. Por favor, use AAAA-MM-DD.")

    tipo = input("Tipo/Categoria (ex: Trabalho, Pessoal, Estudo): ")
    
    # Coleta e valida a situa√ß√£o da tarefa (Feito ou N√£o Feito)
    while True:
        situacao_input = input("A tarefa j√° foi conclu√≠da? (s/n): ").lower()
        if situacao_input in ['s', 'sim']:
            situacao = 1  # 1 representa "Feito"
            break
        elif situacao_input in ['n', 'nao', 'n√£o']:
            situacao = 0  # 0 representa "N√£o Feito"
            break
        else:
            print("Erro: Resposta inv√°lida. Por favor, digite 's' para sim ou 'n' para n√£o.")

    # Retorna uma tupla com todos os dados coletados na ordem correta para o SQL
    return (nome, descricao, data_inicial_str, data_final_str, tipo, situacao)

# --- Bloco de Execu√ß√£o Principal ---
# Este c√≥digo s√≥ roda quando o script √© executado diretamente
def executar():
    """Fun√ß√£o principal para ser chamada pelo menu."""
    nova_tarefa_dados = obter_dados_da_tarefa()
    novo_id_tarefa = inserir_tarefa_db(nova_tarefa_dados)
    if novo_id_tarefa:
        print(f"\n‚úÖ Tarefa '{nova_tarefa_dados[0]}' inserida com sucesso! ID: {novo_id_tarefa}")
    else:
        print("\n‚ùå Falha ao inserir a tarefa.")

if __name__ == '__main__':
    executar()